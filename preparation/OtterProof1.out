otter_ax(1,ev_ax).
otter_ax(2,odd_ax).
otter_ax(3,even_or_odd).
otter_ax(4,goal).
?- io_module(axioms).
ax_name(ev_ax,;(not(even(_460)), ;(not(even(_468)), even(+(_460, _468)))),true,[]).
ax_name(odd_ax,;(not(odd(_460)), ;(not(odd(_468)), even(+(_460, _468)))),true,[]).
ax_name(even_or_odd,;(even(_458), odd(_458)),true,[]).
ax_name(goal,not(even(+(a, a))),true,[]).
?- io_module(situation).
proof([1, global], control, proved).
proof([1, 1], contents, ;(not(even(_986)), ;(not(even(_998)), even(+(_986, _998))))).
proof([1, 1], predecessors, []).
proof([1, ax(1)], predecessors, []).
proof([1, ax(1)], status, axiom(ev_ax)).
proof([1, ax(1)], contents, ;(not(even(_1188)), ;(not(even(_1196)), even(+(_1188, _1196))))).
proof([1, 1], status, rule([intro], [[1, ax(1)]])).
proof([1, 2], contents, ;(not(odd(_986)), ;(not(odd(_998)), even(+(_986, _998))))).
proof([1, 2], predecessors, [[1, 1]]).
proof([1, ax(2)], predecessors, []).
proof([1, ax(2)], status, axiom(odd_ax)).
proof([1, ax(2)], contents, ;(not(odd(_1210)), ;(not(odd(_1218)), even(+(_1210, _1218))))).
proof([1, 2], status, rule([intro], [[1, ax(2)]])).
proof([1, 3], contents, not(even(+(a, a)))).
proof([1, 3], predecessors, [[1, 2]]).
proof([1, ax(4)], predecessors, []).
proof([1, ax(4)], status, axiom(goal)).
proof([1, ax(4)], contents, not(even(+(a, a)))).
proof([1, 3], status, rule([intro], [[1, ax(4)]])).
proof([1, 4], contents, ;(not(even(_1046)), even(+(_1046, _1046)))).
proof([1, 4], predecessors, [[1, 3]]).
proof([1, 4], status, rule([factor, [1, 1, 2]], [])).
proof([1, 5], contents, ;(not(odd(_1046)), even(+(_1046, _1046)))).
proof([1, 5], predecessors, [[1, 4]]).
proof([1, 5], status, rule([factor, [2, 1, 2]], [])).
proof([1, 6], contents, ;(even(_826), odd(_826))).
proof([1, 6], predecessors, [[1, 5]]).
proof([1, ax(3)], predecessors, []).
proof([1, ax(3)], status, axiom(even_or_odd)).
proof([1, ax(3)], contents, ;(even(_988), odd(_988))).
proof([1, 6], status, rule([intro], [[1, ax(3)]])).
proof([1, 7], contents, ;(even(_1020), even(+(_1020, _1020)))).
proof([1, 7], predecessors, [[1, 6]]).
proof([1, 7], status, rule([hyper, 5, [6, 2]], [])).
proof([1, 9], contents, even(+(_987, _987))).
proof([1, 9], predecessors, [[1, 7]]).
proof([1, 9], status, rule([hyper, 4, [7, 1], factor_simp], [])).
proof([1, 10], contents, false).
proof([1, 10], predecessors, [[1, 9]]).
proof([1, 10], status, rule([binary, [9, 1], [3, 1]], [])).
proof([1, po(1)], contents, ;(not(even(v0)), ;(not(even(v1)), even(+(v0, v1))))).
proof([1, po(1)], control, proof_object).
proof([1, po(1)], status, input).
proof([1, po(1)], predecessors, []).
proof([1, po(2)], contents, ;(not(odd(v0)), ;(not(odd(v1)), even(+(v0, v1))))).
proof([1, po(2)], control, proof_object).
proof([1, po(2)], status, input).
proof([1, po(2)], predecessors, []).
proof([1, po(3)], contents, not(even(+(a, a)))).
proof([1, po(3)], control, proof_object).
proof([1, po(3)], status, input).
proof([1, po(3)], predecessors, []).
proof([1, po(4)], contents, ;(not(even(v1)), ;(not(even(v1)), even(+(v1, v1))))).
proof([1, po(4)], control, proof_object).
proof([1, po(4)], status, instantiate(1, [[v0, #, v1]])).
proof([1, po(4)], predecessors, [[1, po(1)]]).
proof([1, po(5)], contents, ;(not(even(v1)), even(+(v1, v1)))).
proof([1, po(5)], control, proof_object).
proof([1, po(5)], status, merge(4, [2])).
proof([1, po(5)], predecessors, [[1, po(4)]]).
proof([1, po(6)], contents, ;(not(even(v0)), even(+(v0, v0)))).
proof([1, po(6)], control, proof_object).
proof([1, po(6)], status, instantiate(5, [[v1, #, v0]])).
proof([1, po(6)], predecessors, [[1, po(5)]]).
proof([1, po(7)], contents, ;(not(odd(v1)), ;(not(odd(v1)), even(+(v1, v1))))).
proof([1, po(7)], control, proof_object).
proof([1, po(7)], status, instantiate(2, [[v0, #, v1]])).
proof([1, po(7)], predecessors, [[1, po(2)]]).
proof([1, po(8)], contents, ;(not(odd(v1)), even(+(v1, v1)))).
proof([1, po(8)], control, proof_object).
proof([1, po(8)], status, merge(7, [2])).
proof([1, po(8)], predecessors, [[1, po(7)]]).
proof([1, po(9)], contents, ;(not(odd(v0)), even(+(v0, v0)))).
proof([1, po(9)], control, proof_object).
proof([1, po(9)], status, instantiate(8, [[v1, #, v0]])).
proof([1, po(9)], predecessors, [[1, po(8)]]).
proof([1, po(10)], contents, ;(even(v0), odd(v0))).
proof([1, po(10)], control, proof_object).
proof([1, po(10)], status, input).
proof([1, po(10)], predecessors, []).
proof([1, po(11)], contents, ;(not(odd(v64)), even(+(v64, v64)))).
proof([1, po(11)], control, proof_object).
proof([1, po(11)], status, instantiate(9, [[v0, #, v64]])).
proof([1, po(11)], predecessors, [[1, po(9)]]).
