%%%%%%%%%%%%%%%%%%%%%  Basic options
op(400, xfy, +).  % infix operators
set(build_proof_object).
set(auto).
set(prolog_style_variables).
%%%%%%%%%%%%%%%%%%%%%  Clauses
list(usable).
% NAME: ev_ax
- even(X) | - even(Y) | even(X + Y).
% NAME: odd_ax
- odd(X) | - odd(Y) | even(X + Y).
% NAME: even_or_odd
even(X) | odd(X).
% NAME: goal
- even(a + a).
end_of_list.
END_FILE
 
----- Otter 3.0.4, August 1995 -----
The job was started by dahn on wega, Mon Jul  8 17:32:59 1996
...
---------------- PROOF ----------------

1 [] -even(A)| -even(B)|even(A+B).
2 [] -odd(A)| -odd(B)|even(A+B).
3 [] -even(a+a).
4 [factor,1,1,2] -even(A)|even(A+A).
5 [factor,2,1,2] -odd(A)|even(A+A).
6 [] even(A)|odd(A).
7 [hyper,5,6.2] even(A)|even(A+A).
9 [hyper,4,7.1,factor_simp] even(A+A).
10 [binary,9.1,3.1] $F.

------------ end of proof -------------


Proof object:
(
(1 (input) ((not (even v0)) (not (even v1)) (even (+ v0 v1))))
(2 (input) ((not (odd v0)) (not (odd v1)) (even (+ v0 v1))))
(3 (input) ((not (even (+ (a) (a))))))
(4 (instantiate 1 ((v0 . v1))) ((not (even v1)) (not (even v1)) (even (+ v1 v1))))
(5 (merge 4 (2)) ((not (even v1)) (even (+ v1 v1))))
(6 (instantiate 5 ((v1 . v0))) ((not (even v0)) (even (+ v0 v0))))
(7 (instantiate 2 ((v0 . v1))) ((not (odd v1)) (not (odd v1)) (even (+ v1 v1))))
(8 (merge 7 (2)) ((not (odd v1)) (even (+ v1 v1))))
(9 (instantiate 8 ((v1 . v0))) ((not (odd v0)) (even (+ v0 v0))))
(10 (input) ((even v0) (odd v0)))
(11 (instantiate 9 ((v0 . v64))) ((not (odd v64)) (even (+ v64 v64))))
